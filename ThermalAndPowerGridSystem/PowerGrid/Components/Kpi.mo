within ThermalAndPowerGridSystem.PowerGrid.Components;

model Kpi

  extends Icons.Kpi_Icon;
  
  import SI = Modelica.Units.SI;
  import nSI = Modelica.Units.NonSI;
  
  Real GridPowerRatio;
  Real StoragePowerRatio;
  Real GenerationPowerRatio;
  Real StorageEffectiveness;
  Real GenerationEffectiveness;

  SI.Power powerTransferedFromGrid, powerTransferedToGrid;
  SI.Power powerTransferedFromStorage, powerTransferedToStorage;
  
  nSI.Energy_Wh windGeneratedEnergy "Generated Electrical Energy (Whr)";
  nSI.Energy_Wh solarGeneratedEnergy "Generated Electrical Energy (Whr)";
  
  nSI.Energy_Wh domesticDemandEnergy "Domestic demand as energy (Whr)";
  nSI.Energy_Wh ChargStationDemandEnergy "Charging station energy demand (Whr)";
  
  nSI.Energy_Wh conventionalGridFromEnergy "Transfered energy from Conventional Grid to Demand (Whr)";
  nSI.Energy_Wh conventionalGridToEnergy "Transfered energy to Conventional Grid from Generation(Whr)";
  
  nSI.Energy_Wh totalStorageEnergy, avgStorageEnergy;
 
  SI.Power totalWindGeneratedPower, totalSolarGeneratedPower, totalTranseferedPowerFromConventionalGrid, totalTranseferedPowerToConventionalGrid, totalDomesticDemandPower, totalChargingStationDemandPower, totalTransferedPowerFromStorage, totalTransferedPowerToStorage;

  SI.Power avgWindGeneratedPower, avgSolarGeneratedPower, avgTranseferedPowerFromConventionalGrid, avgTranseferedPowerToConventionalGrid, avgDomesticDemandPower, avgChargingStationDemandPower, avgTransferedPowerFromStorage, avgTransferedPowerToStorage;
  
  Modelica.Blocks.Interfaces.RealInput StorageEnergy annotation(
    Placement(visible = true, transformation(origin = {-98, -54}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-60, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput StorageCapacity annotation(
    Placement(visible = true, transformation(origin = {-98, -80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-80, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput windGeneratedPowerIn annotation(
    Placement(visible = true, transformation(origin = {-58, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {40, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput solarGeneratedPowerIn annotation(
    Placement(visible = true, transformation(origin = {-30, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {20, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput conventionalGridPowerIn annotation(
    Placement(visible = true, transformation(origin = {-2, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {80, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput domesticDemandPowerIn annotation(
    Placement(visible = true, transformation(origin = {24, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {-20, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
  Modelica.Blocks.Interfaces.RealInput ChargingStationDemandPowerIn annotation(
    Placement(visible = true, transformation(origin = {54, -100}, extent = {{-20, -20}, {20, 20}}, rotation = 90), iconTransformation(origin = {-40, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
 
  Modelica.Blocks.Interfaces.RealInput storagePowerIn annotation(
    Placement(visible = true, transformation(origin = {-98, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {60, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));

algorithm

  if conventionalGridPowerIn > 0 then
    powerTransferedToGrid:= conventionalGridPowerIn;
  else
    powerTransferedFromGrid := -conventionalGridPowerIn;
  end if;
  
  if storagePowerIn > 0 then
    powerTransferedToStorage:= storagePowerIn;
  else
    powerTransferedFromStorage := -storagePowerIn;
  end if;
  
  GridPowerRatio := powerTransferedFromGrid/(domesticDemandPowerIn + ChargingStationDemandPowerIn);
  StoragePowerRatio := powerTransferedFromStorage / (domesticDemandPowerIn + ChargingStationDemandPowerIn);
  GenerationPowerRatio := (windGeneratedPowerIn+solarGeneratedPowerIn)/(domesticDemandPowerIn + ChargingStationDemandPowerIn);
  StorageEffectiveness := avgStorageEnergy/StorageCapacity;
  GenerationEffectiveness := ((domesticDemandPowerIn + ChargingStationDemandPowerIn) - (windGeneratedPowerIn+solarGeneratedPowerIn))/(domesticDemandPowerIn + ChargingStationDemandPowerIn);
  
  windGeneratedEnergy := totalWindGeneratedPower / 3600;
  solarGeneratedEnergy := totalSolarGeneratedPower / 3600;
  domesticDemandEnergy := totalDomesticDemandPower / 3600;
  ChargStationDemandEnergy := totalChargingStationDemandPower / 3600;

equation

  der(totalWindGeneratedPower) = windGeneratedPowerIn;
  der(totalSolarGeneratedPower) = solarGeneratedPowerIn;
  der(totalTranseferedPowerFromConventionalGrid) = powerTransferedFromGrid;
  der(totalTranseferedPowerToConventionalGrid) = powerTransferedToGrid;
  der(totalDomesticDemandPower) = domesticDemandPowerIn;
  der(totalChargingStationDemandPower) = ChargingStationDemandPowerIn;
  der(totalTransferedPowerFromStorage) = powerTransferedFromStorage;
  der(totalTransferedPowerToStorage) = powerTransferedToStorage;
  
  der(conventionalGridFromEnergy) = powerTransferedFromGrid / 3600;
  der(conventionalGridToEnergy) = powerTransferedToGrid / 3600;
  
  der(totalStorageEnergy) = StorageEnergy;
  
  when terminal() then
  
     avgStorageEnergy = totalStorageEnergy/time;
     avgWindGeneratedPower = totalWindGeneratedPower/time;
     avgSolarGeneratedPower = totalSolarGeneratedPower/time;
     avgTranseferedPowerFromConventionalGrid = totalTranseferedPowerFromConventionalGrid/time;
     avgTranseferedPowerToConventionalGrid = totalTranseferedPowerToConventionalGrid/time;
     avgDomesticDemandPower = totalDomesticDemandPower/time;
     avgChargingStationDemandPower = totalChargingStationDemandPower/time;
     avgTransferedPowerFromStorage = totalTransferedPowerFromStorage/time;
     avgTransferedPowerToStorage = totalTransferedPowerToStorage/time;
     
  end when;
  
protected

annotation(
    Icon(graphics = {Bitmap(extent = {{-38, 30}, {-38, 30}}, imageSource = "")}),
    Diagram(graphics = {Rectangle(origin = {1, 0}, extent = {{-79, 80}, {79, -80}})}),
 Documentation(info = "<html><head></head><body>This components will contain key performance indicator such as :<!--EndFragment--><div><br></div><div><ul><li>Grid Power Ratio, which is calculated as ratio of Power Supplied from Grid and Total Demand Power.</li><li>Generation Power Ratio, which is calculated as ratio of Available Generated Power and Total Demand Power.</li><li>Storage Power Ratio, which is calculated as ratio of Power Supplied from Storage and Total Demand Power.</li><li>Generation Effectiveness, which is calculated as ratio of (Total Demand Power - Available Generated Power) and Total Demand Power.</li><li>Storage Effectiveness, which is calculated as ratio of Average Storage Energy and Storage Capacity.</li></ul></div></body></html>"));
end Kpi;
